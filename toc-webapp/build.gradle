apply plugin: "war"
apply plugin: 'maven-publish'

ext {
    localVersions = [jstl : "1.2"]
}

configurations {
    all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
    all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
    babel
}

dependencies {

    compile group: "org.springframework", name: "spring-webmvc", version: "$project.versions.spring"
    compile group: "org.springframework", name: "spring-messaging", version: "$project.versions.spring"
    compile group: "org.springframework", name: "spring-websocket", version: "$project.versions.spring"
    compile group: "javax.servlet", name: "jstl", version: "$localVersions.jstl"
    compile group: "org.codehaus.jackson", name: "jackson-mapper-asl", version: "$project.versions.jackson"
    compile(group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2')

    runtime group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.6.5'
    runtime group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.5'

    runtime group: "org.slf4j", name:"slf4j-log4j12", version:"$project.versions.slf4j"
    runtime group: "log4j", name:"log4j", version:"$project.versions.log4j"
    runtime group: "commons-logging", name: "commons-logging", version: "$project.versions.commons_logging"
    runtime(group: 'junit', name: 'junit', version: '3.8.1')

    providedCompile group: "javax.servlet", name: "javax.servlet-api", version: "$project.versions.javax_servlet_api"
    providedCompile group: "javax.jms", name: "jms", version: "$project.versions.jms"
    providedCompile group: 'commons-collections', name: 'commons-collections', version: '3.2.1'
    providedCompile group: 'commons-codec', name: 'commons-codec', version: '1.6'

    providedCompile 'com.cerner.cto.infrastructure:infrastructure-provided:' + "$project.versions.infrastructureProvided" + '@jar'
    providedCompile 'com.cerner.cto.infrastructure:infrastructure-security:' + "$project.versions.infrastructureProvided" + '@jar'

    providedCompile group: 'joda-time', name: 'joda-time', version: "$project.versions.jodaTime"

    compile project(":toc-common")
    compile project(":toc-persistence")
    compile project(":toc-services")
    compile project(":toc-webservices")

    testCompile group: "org.mockito", name: "mockito-core", version: "$project.versions.mockito"
    testCompile group: 'org.objenesis', name: 'objenesis', version: "$project.versions.objenesis"

    babel group: 'babel', name: 'babel-node', version: '6.6.4', ext: 'zip'
}

war {
    println 'Adding logging jars to the war that are excluded as transient provided dependencies.'
    configurations.runtime.files { dep -> dep.name == 'log4j' || dep.name == 'commons-logging' || dep.name == 'slf4j-log4j12' }.each { file ->
        println "... Adding jar $file.name"
        classpath file
    }
}

task generateMyResources {
    doLast {
        def generated = new File(generatedResources, "myGeneratedResource.properties")
        generated.text = "message=Stay happy!"
    }
}

def reactJsPath = "/react/js"
def reactCompiledOutputPath = buildDir.absolutePath + reactJsPath
def reactBuildPath = buildDir.toPath().fileName.toString() + reactJsPath
def reactCachePath = buildDir.toPath().fileName.toString() + "/react"

// we need to specify "resources/js/react"
// since jsx does not recreate dir structures
def reactCompiledOutputWarPath = "/gen/resources/js/react"
def reactSrcPath = "src/main/webapp/resources/js/react"

task compileJsx(type:Exec) {
    build.mustRunAfter clean
    workingDir "."

    // jsx tool hangs (and does not say a word why)
    // if the complete directory name was passed to it
    commandLine "cmd",
            "/c",
            "jsx" +
            " ./" + reactSrcPath +
            " ./" + reactBuildPath +
            " --cache-dir ./" + reactCachePath

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}


task watchJsx(type:Exec) {
    //println "JSX Build " + reactBuildPath
    //println "JSX WAR Build " + reactCompiledOutputPath
    //println "JSX WAR Output " + reactCompiledOutputWarPath
    //println "JSX Cache Path " + reactCachePath
    build.mustRunAfter clean
    workingDir "."

    // jsx tool hangs (and does not say a word why)
    // if the complete directory name was passed to it
    commandLine "cmd",
            "/c",
            "jsx" +
            " -w" +
            " ./" + reactSrcPath +
            " ./" + reactBuildPath +
            " --cache-dir ./" + reactCachePath

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

task downloadBabel(type: Copy) {
    def zipFile = file("${configurations.babel.files.iterator().next()}");
    def outputDir = file("${buildDir}/babel")

    from zipTree(zipFile)
    into outputDir
}

task babel(type:Exec) {
    commandLine "cmd", "/c", "${buildDir}/babel/babel ${projectDir}/src/main/webapp/resources/js/react " +
                             "--out-dir ${buildDir}/react/js --blacklist useStrict"

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

babel.dependsOn downloadBabel

war{

    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version + (null ==System.getProperty("BUILD_NUMBER") ? "" : "." + System.getProperty("BUILD_NUMBER")) + (null == System.getProperty("ACCUREV_TRANSACTION") ? "" : "." + System.getProperty("ACCUREV_TRANSACTION")),
                "Built-By": System.getProperty("user.name"),
                "Built-JDK": System.getProperty("java.version"),
                "Built-Host": InetAddress.getLocalHost(),
                "Build-Time-ISO-8601": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }

    // dependsOn(compileJsx) // NOTE!!! If you're still using JSX, enable this and disable the line below (babel).
    dependsOn(babel)

    webInf {
        from reactCompiledOutputPath
        into reactCompiledOutputWarPath
    }
}
