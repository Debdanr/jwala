
dependencies {
    compile project(":toc-services")

    testCompile group: "org.mockito", name: "mockito-core", version: "$project.versions.mockito"
    testCompile group: 'org.objenesis', name: 'objenesis', version: "$project.versions.objenesis"
    testCompile group: "org.springframework", name: "spring-test", version: "$project.versions.spring"

    compile group: "org.apache.cxf", name: "cxf-rt-frontend-jaxws", version: "$project.versions.cxf"
    compile group: "org.apache.cxf", name: "cxf-rt-transports-http", version: "$project.versions.cxf"
    compile group: "org.apache.cxf", name: "cxf-rt-frontend-jaxrs", version: "$project.versions.cxf"
    
    compile 'org.springframework.security:spring-security-web:4.1.1.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.1.1.RELEASE'
    compile 'org.springframework.security:spring-security-ldap:4.1.1.RELEASE'
    
    compile group: "javax.ws.rs", name: "javax.ws.rs-api", version: "$project.versions.javax_ws_rs_api"
    compile group: "org.springframework", name: "spring-web", version: "$project.versions.spring"
    compile group: "org.codehaus.jackson", name: "jackson-jaxrs", version: "$project.versions.jackson"
    compile group: "javax.servlet", name: "javax.servlet-api", version: "$project.versions.javax_servlet_api"
    compile group: "commons-fileupload", name: "commons-fileupload", version: "$project.versions.commons_fileupload"
    compile group: "commons-io", name: "commons-io", version: "$project.versions.jodaTime"
    compile group: "org.jgroups", name: "jgroups", version: "$project.versions.jgroups"

    testRuntime group: "com.cerner.cto.infrastructure", name: "infrastructure-provided", version: "$project.versions.infrastructureProvided", transitive: false
	testRuntime group: 'org.apache.tomcat', name: 'tomcat-coyote', version: "$project.versions.tomcat"

//    runtime group: "org.apache.cxf", name: "cxf-rt-frontend-jaxws", version: "$project.versions.cxf"
//    runtime group: "org.apache.cxf", name: "cxf-rt-transports-http", version: "$project.versions.cxf"
//    runtime group: "org.apache.cxf", name: "cxf-rt-frontend-jaxrs", version: "$project.versions.cxf"
//    runtime group: "javax.ws.rs", name: "javax.ws.rs-api", version: "$project.versions.javax_ws_rs_api"
//    runtime group: "org.springframework", name: "spring-web", version: "$project.versions.spring"
//    runtime group: "org.codehaus.jackson", name: "jackson-jaxrs", version: "$project.versions.jackson"
//    runtime group: "javax.servlet", name: "servlet-api", version: "$project.versions.javax_servlet_api"
//    runtime group: "commons-fileupload", name: "commons-fileupload", version: "$project.versions.commons_fileupload"
//    runtime group: "commons-io", name: "commons-io", version: "$project.versions.commons_fileupload"
//    runtime group: "org.jgroups", name: "jgroups", version: "$project.versions.jgroups"

}
/*
apply plugin: 'miredot'

miredot {
    source = sourceSets.main.allJava
    destination = sourceSets.main.output
    licence = 'UHJvamVjdHxjb20uc2llbWVucy5jdG8uYWVtLmFlbS13ZWJzZXJ2aWNlc3wyMDE3LTAxLTI4fGZhbHNlI01DMENGRk9DSm12bWsxbEl3amNjMEljWDFiWEN5bWdSQWhVQWxoRTFXYlV2R0N6RzA3WkNybFZ4dTNaTXYyWT0='
}

configurations {
  miredotlib
}

dependencies {
    miredotlib 'com.qmino:miredot-plugin:1.6.1'
}

task getDeps(type: Copy) {
  from configurations.miredotlib
  into 'runtime/'
}

buildscript {
    repositories {
          maven { url "http://usmlvv1srn464.usmlvv1d0a.smshsc.net/artifactory/repo/" }
//        maven { url "http://nexus.qmino.com/content/repositories/miredot" }
//        maven { url "http://nexus.qmino.com/content/repositories/miredot-snapshots" }
    }
    dependencies {
        classpath 'com.qmino:miredot-plugin:1.6.1'
    }
}
*/

test {
    jacoco {
        excludes = ["com.cerner.jwala.persistence.configuration.*",
                    "com.cerner.jwala.persistence.domain.*",
                    "com.cerner.jwala.common.domain.model.*",
                    "com.cerner.jwala.common.*",
                    "*.configuration.*",
                    "**.configuration.**",
                    "com.cerner.jwala.service.configuration.service.*"]
    }
}
