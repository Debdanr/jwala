
configurations {
  jaxDoclet { extendsFrom compile }
}

dependencies {
    compile project(":aem-services")

    testCompile group: "org.mockito", name: "mockito-core", version: "$project.versions.mockito"
    compile group: "org.apache.cxf", name: "cxf-rt-frontend-jaxws", version: "$project.versions.cxf"
    compile group: "org.apache.cxf", name: "cxf-rt-transports-http", version: "$project.versions.cxf"
    compile group: "org.apache.cxf", name: "cxf-rt-frontend-jaxrs", version: "$project.versions.cxf"
    compile group: "javax.ws.rs", name: "javax.ws.rs-api", version: "$project.versions.javax_ws_rs_api"
    compile group: "org.springframework", name: "spring-web", version: "$project.versions.spring"
    compile group: "org.codehaus.jackson", name: "jackson-jaxrs", version: "$project.versions.jackson"
    
    jaxDoclet group: "com.lunatech.jax-doclets", name: "doclets", version: "0.10.0"
}

task generateRestApiDocs(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = reporting.file("rest-api-docs")
  options.docletpath = configurations.jaxDoclet.files.asType(List)
  options.doclet = "com.lunatech.doclets.jax.jaxrs.JAXRSDoclet"
  options.classpath file('../thirdparty/jax-doclets/doclets/target/jax-doclets-0.10.1-SNAPSHOT.jar')
  options.addStringOption("jaxrscontext", "http://localhost:8080/aem")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

test {
    jacoco {
      excludes = ["com.siemens.cto.aem.persistence.configuration.*",
                  "com.siemens.cto.aem.persistence.domain.*",
                  "com.siemens.cto.aem.domain.model.*",
                  "com.siemens.cto.aem.common.*",
                  "*.configuration.*",
                  "**.configuration.**",
                  "com.siemens.cto.aem.service.configuration.service.*"]
    }
}