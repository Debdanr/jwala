apply plugin: 'maven-publish'
apply plugin: 'java'

dependencies {
    compile project(":toc-common")

    compile group: "org.apache.openjpa", name: "openjpa", version: "$project.versions.jpa"

    testCompile group: 'org.springframework', name: 'spring-context', version: "$project.versions.spring"
    testCompile group: 'org.springframework', name: 'spring-core', version: "$project.versions.spring"
    testCompile group: "org.springframework", name: "spring-orm", version: "$project.versions.spring"
    testCompile group: "org.springframework", name: "spring-test", version: "$project.versions.spring"

    testCompile group: "com.h2database", name: "h2", version: "$project.versions.h2"
    testCompile group: "org.apache.openjpa", name: "openjpa", version: "$project.versions.jpa"
    testCompile group: 'org.springframework', name: 'spring-tx', version: "$project.versions.spring"

    testCompile group: "org.springframework", name: "spring-context", version: "$project.versions.spring"
    testCompile group: "org.springframework", name: "spring-orm", version: "$project.versions.spring"
    testCompile group: 'org.springframework', name: 'spring-test', version: "$project.versions.spring"
}

test {
    jacoco {
      excludes = ["com.siemens.cto.aem.persistence.configuration.*",
                  "com.siemens.cto.aem.persistence.domain.*",
                  "com.siemens.cto.aem.common.domain.model.*",
                  "com.siemens.cto.aem.common.*",
                  "*.configuration.*",
                  "**.configuration.**"]
    }
}

Map<String, String> pm = new HashMap<String, String>()
pm.put('openjpa.ConnectionDriverName', 'org.h2.Driver')
pm.put('openjpa.ConnectionURL', 'jdbc:h2:~/test')
pm.put('openjpa.ConnectionUserName', 'sa')
pm.put('openjpa.ConnectionPassword', '')
pm.put('org.apache.openjpa.jdbc.sql.DBDictionary','org.apache.openjpa.jdbc.sql.H2Dictionary')

task createDdl (type:JavaExec) {
    main = 'org.apache.openjpa.jdbc.meta.MappingTool'
    classpath = files(project.buildDir.path + "/classes/main", sourceSets.test.compileClasspath)
    systemProperties = pm
    args = ["-action","buildSchema",
            "-schemaAction","build",
            "-sql","create.sql",
            "-pk","true",
            "-fk","true",
            "-ix","true",
            "-sq","true",
            "-p","${project.projectDir.path}/src/main/resources/META-INF/persistence.xml"]
}

task dropDdl (type:JavaExec) {
    main = 'org.apache.openjpa.jdbc.meta.MappingTool'
    classpath = files(project.buildDir.path + "/classes/main", sourceSets.test.compileClasspath)
    systemProperties = pm
    args = ["-action","buildSchema",
            "-schemaAction","retain,drop",
            "-sql","drop.sql",
            "-p","${project.projectDir.path}/src/main/resources/META-INF/persistence.xml"]
}

task h2Reset (type:JavaExec) {
    main = 'org.apache.openjpa.jdbc.meta.MappingTool'
    classpath = files(project.buildDir.path + "/classes/main", sourceSets.test.compileClasspath)
    systemProperties = pm
    args = ["-action","buildSchema",
            "-schemaAction","deleteTableContents,drop,add",
            "-ignoreErrors","true",
            "-p","${project.projectDir.path}/src/main/resources/META-INF/persistence.xml"]
}

task mappingToolHelp (type:JavaExec) {
    main = 'org.apache.openjpa.jdbc.meta.MappingTool'
    classpath = files(project.buildDir.path + "/classes/main", sourceSets.test.compileClasspath)
    systemProperties = pm
    args = ["-help"]
}

publish.dependsOn << createDdl << dropDdl

task enhanceJpaEntities(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.apache.openjpa.enhance.PCEnhancer'
}

test.dependsOn enhanceJpaEntities
jar.dependsOn enhanceJpaEntities


