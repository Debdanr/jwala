apply plugin: "war"

ext {
    localVersions = [jstl : "1.2"]
}

configurations {
    all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jta_1.1_spec'
    all*.exclude group: 'org.apache.geronimo.specs', module: 'geronimo-jms_1.1_spec'
    all*.exclude group: 'org.slf4j'
}

dependencies {

    compile group: "org.springframework", name: "spring-webmvc", version: "$project.versions.spring"
    compile group: "javax.servlet", name: "jstl", version: "$localVersions.jstl"
    compile group: "org.codehaus.jackson", name: "jackson-mapper-asl", version: "$project.versions.jackson"

    providedCompile group: "javax.servlet", name: "servlet-api", version: "$project.versions.javax_servlet_api"
    providedCompile group: "javax", name: "jms", version: "$project.versions.jms"
    providedCompile group: "com.siemens.cto.infrastructure", name: "infrastructure-provided", version: "$project.versions.infrastructureProvided"

    compile project(":aem-common")
    compile project(":aem-persistence")
    compile project(":aem-services")
    compile project(":aem-webservices")
    compile project(":aem-config")

    testCompile group: "org.mockito", name: "mockito-core", version: "$project.versions.mockito"

}

task generateMyResources {
    doLast {
        def generated = new File(generatedResources, "myGeneratedResource.properties")
        generated.text = "message=Stay happy!"
    }
}

def reactJsPath = "/react/js"
def reactCompiledOutputPath = buildDir.absolutePath + reactJsPath
def reactBuildPath = buildDir.toPath().fileName.toString() + reactJsPath
def reactCachePath = buildDir.toPath().fileName.toString() + "/react"

// we need to specify "resources/js/react"
// since jsx does not recreate dir structures
def reactCompiledOutputWarPath = "/gen/resources/js/react"
def reactSrcPath = "src/main/webapp/resources/js/react"

task compileJsx(type:Exec) {
    build.mustRunAfter clean
    workingDir "."

    // jsx tool hangs (and does not say a word why)
    // if the complete directory name was passed to it
    commandLine "cmd",
                "/c",
                "jsx" +
                " ./" + reactSrcPath +
                " ./" + reactBuildPath +
                " --cache-dir ./" + reactCachePath

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}


task watchJsx(type:Exec) {
    //println "JSX Build " + reactBuildPath
    //println "JSX WAR Build " + reactCompiledOutputPath
    //println "JSX WAR Output " + reactCompiledOutputWarPath
    //println "JSX Cache Path " + reactCachePath
    build.mustRunAfter clean
    workingDir "."

    // jsx tool hangs (and does not say a word why)
    // if the complete directory name was passed to it
    commandLine "cmd",
                "/c",
                "jsx" +
                " -w" +
                " ./" + reactSrcPath +
                " ./" + reactBuildPath +
                " --cache-dir ./" + reactCachePath

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

war{
    manifest {
        attributes(
            "Implementation-Title": project.name,
            "Implementation-Version": project.version + (null ==System.getProperty("BUILD_NUMBER") ? "" : "." + System.getProperty("BUILD_NUMBER")) + (null == System.getProperty("ACCUREV_TRANSACTION") ? "" : "." + System.getProperty("ACCUREV_TRANSACTION")),
            "Built-By": System.getProperty("user.name"),
            "Built-JDK": System.getProperty("java.version"),
            "Built-Host": InetAddress.getLocalHost(),
            "Build-Time-ISO-8601": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }

    dependsOn(compileJsx)

    webInf {
         from reactCompiledOutputPath
         into reactCompiledOutputWarPath
    }
}

publishing {
    publications {
        mavenWeb(MavenPublication) {
            from components.web
        }
    }
}