apply plugin: 'groovy'
apply plugin: 'stpIntegTest'
apply plugin: 'stpJvmControl'

import com.siemens.cto.gradle.*
import org.h2.tools.Server
import groovy.sql.Sql

configurations {
    integTestConf
    integTestSuite
}

sourceSets {
    integTestSuite {
        groovy {
            srcDir 'src/integ-test/groovy'
        }
    }
    main {
        groovy {
            srcDirs = [/*intentionally empty*/]
        }
    }
}

dependencies {

    /*
      compile group: "org.codehaus.groovy", name: "groovy-all", version: "$project.versions.groovy"
      compile group: 'org.apache.httpcomponents', name: 'httpclient', version: "$project.versions.httpcomponents_client"
      compile group: 'org.apache.httpcomponents', name: 'httpcore', version: "$project.versions.httpcomponents_core"
      No compile dependencies needed. Junit removed from this block and placed below.
    */ 
    
    integTestConf group: "org.jacoco", name: "org.jacoco.agent", version: "$project.versions.jacoco"
    integTestConf group: "com.siemens.cto", name: "dev-bundle", version: "$project.versions.devbundle"
    integTestConf group: "com.h2database", name: "h2", version: "$project.versions.h2"

    integTestSuiteCompile configurations.testCompile
    integTestSuiteCompile group: "org.codehaus.groovy", name: "groovy-all", version: "$project.versions.groovy"
    integTestSuiteCompile group: "org.apache.ant", name: "ant", version: "$project.versions.ant"
    integTestSuiteCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: "$project.versions.httpcomponents_client"
    integTestSuiteCompile group: 'org.apache.httpcomponents', name: 'httpcore', version: "$project.versions.httpcomponents_core"
    integTestSuiteCompile group: 'junit', name:'junit', version: '$project.versions.junit'
    integTestSuiteCompile files(fileTree(dir: 'lib', includes: ['*.jar']))

}


buildscript {
    repositories {
        mavenLocal()
        maven { url "http://usmlvv1srn464.usmlvv1d0a.smshsc.net/artifactory/repo/" }
    }
    dependencies {
        classpath group: "com.siemens.cto.infrastructure", name: "infrastructure-gradle", version: "1.0-SNAPSHOT"

        // Enable for local development and don't forget to disable the classpath definition that also has "infrastructure-gradle"
        // classpath files("D:/view_store/workspace/git/CTO-TIM/infrastructure-gradle/build/libs/infrastructure-gradle-1.0-SNAPSHOT.jar")

        classpath group: "com.h2database", name: "h2", version: "$project.versions.h2"
    }
}

def now = new Date()
def STP_TEMP_PATH = "D:/aem-integ-test-temp-${now.format("yyyyMMdd-HHmmss")}"
def JVM_INSTANCE_PATH = "stp/siemens/instances/jvm-1"
def AEM_CONTEXT_FILE = "aem.xml"
def DB_NAME = "integ-test-tmp-db"
def JDBC_ORIG_URL = "jdbc:h2:file:/stp/siemens/data/h2/toc"
def ROOT_NAME = "aem"

// Should this be in the plugin as well ?
def JACOCO_EXEC_FILE = "test.dat" // Prevent parent merge test task from scooping this up since we want to do our own merging here after our integ tests runs

configurations.integTestConf.each {
    GroovyObject.class.classLoader.addURL(it.toURI().toURL())
}

/**
 * Creates tables.
 *
 * NOTE!!! Make sure that create.sql are the latest copies by running aem-persistence's createDdl
 *         tasks. These tasks should be made to run before the runIntegTests tasks.
 */
task ("createTables") << {
    @GrabConfig(systemClassLoader = true)
    @Grab(group="com.h2database", module="h2", version="$project.versions.h2")
    def sql = Sql.newInstance("jdbc:h2:tcp://localhost/${STP_TEMP_PATH}/${DB_NAME}", "sa", "", "org.h2.Driver")
    def createScript = new File("$project.rootDir/aem-persistence/create.sql")
    createScript.eachLine {
        println it
        sql.execute(it)
    }
}

task ("setAemContextJdbcResourceUrl") << {
    File f = new File("${STP_TEMP_PATH}/${JVM_INSTANCE_PATH}/conf/stp/localhost/${AEM_CONTEXT_FILE}")
    def fText = f.text
    fText = fText.replaceFirst("${JDBC_ORIG_URL}",
            "jdbc:h2:tcp://localhost/${STP_TEMP_PATH}/${DB_NAME}")
    f.write(fText)
}

// Configure AEM context
task activateAemContext(type: Copy) {
    from "${project.parent.projectDir}/aem-build/toc-tomcat/conf/stp/localhost"
    into "${STP_TEMP_PATH}/${JVM_INSTANCE_PATH}/conf/stp/localhost"
    include "${AEM_CONTEXT_FILE}"

    doLast {
        setAemContextJdbcResourceUrl.execute()
    }
}

// Run QTP Script
def CSCRIPT_FULL_PATH = "C:\\Windows\\System32"
def INTEG_TEST_QTP_SCRIPT = "C:\\Users\\z003cjrh\\Documents\\Unified Functional Testing\\TOCDemoConf.vbs"

// TODO: Deprecate when we're sure we no longer needs this (e.g. SOAP UI is already being used...)
task runIntegTestQtpScript(type: ProcessExec) {
    command "Cscript \"${INTEG_TEST_QTP_SCRIPT}\""
    directory "${CSCRIPT_FULL_PATH}"
    exitOnSuccessIndicator "SUCCESS"
    exitOnFailIndicator "FAIL"
    timeout 900000 // timeout in 15 minutes
}

// This is the QTP replacement so remove the QTP codes above once this is tested.
def PS_EXEC_TARGET_HOST = "165.226.228.183"
def PS_EXEC_USER = "ww005\\z003cjrh"
def PS_EXEC_PWD = "Efghi123"
def PS_EXEC_SCRIPT = "C:\\Users\\z003cjrh\\Documents\\SOAP\\soapTOC3-inbatch.bat"

task psExec(type: ProcessExec) {
    command "PsExec.exe \\\\${PS_EXEC_TARGET_HOST} -u ${PS_EXEC_USER} -p ${PS_EXEC_PWD} ${PS_EXEC_SCRIPT}"
    directory "D:\\tools\\PSTools"
    exitOnSuccessIndicator "Passed"
    exitOnFailIndicator "Failed"
    timeout 3600000 // timeout in an hour
}

task integTestSuiteRunner(type: Test) {
    testClassesDir = sourceSets.integTestSuite.output.classesDir
    classpath = sourceSets.integTestSuite.runtimeClasspath
}


// Merge Jacoco report
task renameMergedReportToAccumExec (type: Copy) {
    from "${buildDir}/jacoco"
    into "${project.parent.buildDir}/jacoco"
    include "accum-merged.exec"
    rename "accum-merged.exec", "accum.exec"
}

/**
 * Merge test coverage report.
 */
task mergeIntegTestReport(type: JacocoMerge) {
    destinationFile = file("${buildDir}/jacoco/accum-merged.exec")
    executionData {
        return files(file("${project.parent.buildDir}/jacoco/accum.exec"),
                file("${buildDir}/jacoco/${JACOCO_EXEC_FILE}"))
    }
    doLast {
        renameMergedReportToAccumExec.execute()
    }
}

def h2TcpServer = null
task runIntegTests(type: com.siemens.cto.gradle.StpIntegTestTask) {
    stpTempPath STP_TEMP_PATH
    configName "integTestConf"
    childProjectName "${ROOT_NAME}-webapp"
    warFileToDeploy "${ROOT_NAME}-webapp-1.0-SNAPSHOT.war"
    jvmInstancePath JVM_INSTANCE_PATH
    jvmShutdownWaitTime 60000 // Make it 1 minutes to make sure that the JVM has shutdown and the Jacoco agent lock removed.
    pingUrl "https://localhost:9101/stp.png"

    beforeJvmStart {
        activateAemContext.execute()
        h2TcpServer = Server.createTcpServer().start() // start h2
        createTables.execute()
    }

    onJvmStart {
    
        println "Server ready, running tests..."

        integTestSuiteRunner.execute()

        //  Peter is commenting this out because it prevents things running locally. 
        //  psExec.execute()

    }

    beforeCleanup {
        h2TcpServer.stop() // stop h2
    }
}

runIntegTests.dependsOn     compileIntegTestSuiteGroovy
runIntegTests.finalizedBy   mergeIntegTestReport