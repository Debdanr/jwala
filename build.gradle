apply plugin: "sonar-runner"

ext {
    versions = [
                 junit : "4.+",
                 pmd : "4.3",
                 spring : "3.2.6.RELEASE",
                 jackson : "1.4.2",
                 jpa : "2.2.2",
                 h2 : "1.3.175",
                 cxf: "3.0.0-milestone1",
                 javax_ws_rs_api: "2.0",
                 mockito: "1.9.5",
                 slf4j : '1.7.5',
                 slf4j_log4j12 : '1.7.5',
                 javax_servlet_api: '3.0',
                 csa : "2.3"
                ]
}

sonarRunner {
    sonarProperties {
        property 'sonar.host.url', 'http://usmlvv1cto923:9000'
        property 'sonar.jdbc.url', 'jdbc:mysql://usmlvv1cto923/sonar'
        property 'sonar.jdbc.driverClassName', 'com.mysql.jdbc.Driver'
        property 'sonar.jdbc.username', 'sonar'
        property 'sonar.jdbc.password', 'sonar'
        property 'sonar.dynamicAnalysis', 'reuseReports'
        properties ["sonar.projectKey"] = 'cto.tco.toc'
        properties ["sonar.projectName"] = 'tomcat operations center'
        properties ["sonar.projectVersion"] = '1.0.0'
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "pmd"
    apply plugin: 'maven-publish'
    apply plugin: "eclipse"

    sourceCompatibility = 1.7
    group = "com.siemens.cto.aem"
    version = "1.0-SNAPSHOT"

    publishing {
        repositories {
            maven {
                url "http://usmlvv1srn464/artifactory/libs-snapshot-local"
                credentials {
                    username 'deployer'
                    password 'deployerpassword'
                }
            }
        }
    }

    repositories {
        maven {
            url "http://usmlvv1srn464/artifactory/repo/"
        }
        maven {
            url "http://usmlvv1nrg645/artifactory/ext-release-local"
        }
    }

    dependencies {

        compile group: 'org.slf4j', name: 'slf4j-api', version: "$versions.slf4j"
        compile group: 'org.slf4j', name: 'slf4j-log4j12', version: "$versions.slf4j_log4j12"

        testCompile "junit:junit:4.11"
        testCompile group: 'org.mockito', name: 'mockito-core', version: "$versions.mockito"

        pmd group: "pmd", name: "pmd", version: "$versions.pmd"
    }

    jar {
        manifest {
            attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version + (null ==System.getProperty("BUILD_NUMBER") ? "" : "." + System.getProperty("BUILD_NUMBER")) + (null == System.getProperty("ACCUREV_TRANSACTION") ? "" : "." + System.getProperty("ACCUREV_TRANSACTION")),
                "Built-By": System.getProperty("user.name"),
                "Built-JDK": System.getProperty("java.version"),
                "Built-Host": InetAddress.getLocalHost(),
                "Build-Time-ISO-8601": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            )
        }
    }

    pmdMain {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    pmdTest {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    jacoco {
        toolVersion = "0.6.3.201306030806"
    }

    jacocoTestReport {
        reports {
            xml.enabled = false
            csv.enabled = false
            html.enabled = true
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    test {
        systemProperties['run.test.types'] = 'integration'
        systemProperties['spring.profiles.active'] = 'integration'
    }

    task copyResult(type: Copy) {
      from file("${project.buildDir.path}/jacoco/")
      into file("${project.rootProject.buildDir.path}/jacoco/")
      include "accum-${project.name}.exec"
      rename  "accum-${project.name}.exec", "accum.exec"
    }
    
    task mergeTestCodeCoverageResults(type: JacocoMerge) {
      description = 'Merge test code coverage results from all java projects'
      destinationFile = file("${project.buildDir.path}/jacoco/accum-${project.name}.exec")
      def mergeFile = file("${project.rootProject.buildDir.path}/jacoco/accum.exec")
      def testFile = file("${project.buildDir.path}/jacoco/test.exec")
      onlyIf { 
        testFile.exists()
      }
      executionData { 
          if(mergeFile.exists()) return files(mergeFile, testFile);
          else return files(testFile);
      }
      doLast {
          copyResult.execute();
      }      
    }    
    
    test.finalizedBy mergeTestCodeCoverageResults
    
    sonarRunner { 
      sonarProperties {
        property "sonar.junit.reportsPath", test.reports.junitXml.destination   // will be fixed in Gradle 1.12
        property "sonar.jacoco.reportPath", project.rootProject.buildDir.path + "/jacoco/" + "accum.exec"
      }      
    }
    
}
