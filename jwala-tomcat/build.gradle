apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download

configurations {
    compile {
        description = 'compile classpath'
        transitive = false
    }
}

dependencies {
//    TODO compile'com.cerner.cto.stp.chef.toc.libs:catalina-jmx-remote'
//    https://artifactory/artifactory/simple/cto-ext-release-local/com/cerner/cto/stp/chef/toc/libs/catalina-jmx-remote.jar
    compile(group: 'com.cerner.cto.cac', name: 'CommonSecurity', version: '4.0.0800.05')
    compile(group: 'com.cerner.cto.infrastructure', name: 'infrastructure-provided', version: '1.2.1')
    compile(group: 'com.cerner.cto.infrastructure', name: 'infrastructure-security', version: '1.2.1')
    // TODO add LifecycleListener-1.0.jar

    compile(group: 'commons-collections', name: 'commons-collections', version: '3.2.2')
    compile(group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1')
    compile(group: 'commons-lang', name: 'commons-lang', version: '2.6')
    compile(group: 'commons-logging', name: 'commons-logging', version: '1.1.1')
    compile(group: 'org.owasp.esapi', name: 'esapi', version: '2.0.1')
    compile(group: 'org.apache.geronimo.specs', name: 'geronimo-jpa_2.0_spec', version: '1.1')
    compile(group: "com.h2database", name: "h2", version: "$project.versions.h2")
    compile(group: 'javax.jms', name: 'jms', version: '2.0')
    compile(group: 'joda-time', name: 'joda-time', version: '2.2')
    compile(group: 'javax.servlet', name: 'jstl', version: '1.2')
    compile(group: 'javax.transaction', name: 'jta', version: '1.1')
    compile(group: 'log4j', name: 'log4j', version: '1.2.17')
    compile(group: 'ca.juliusdavies', name: 'not-yet-commons-ssl', version: '0.3.9')
    compile(group: 'org.opensaml', name: 'opensaml', version: '2.6.4')
    compile(group: 'org.opensaml', name: 'openws', version: '1.5.4')
    compile(group: 'org.slf4j', name: 'slf4j-api', version: '1.7.6')
    compile(group: 'taglibs', name: 'standard', version: '1.1.2')
    compile(group: 'com.tibco', name: 'tibcrypt', version: '8.3.0')
    compile(group: 'com.tibco', name: 'tibjms', version: '8.3.0')
    compile(group: 'com.tibco', name: 'tibjmsadmin', version: '8.3.0')
    compile(group: 'org.apache.santuario', name: 'xmlsec', version: '1.5.6')
    compile(group: 'org.opensaml', name: 'xmltooling', version: '1.4.4')
}


buildscript {
    repositories { jcenter() }
    dependencies { classpath 'de.undercouch:gradle-download-task:3.1.1' }
}

task downloadTomcat(type: Download) {
    src "${tomcatBinaryUrl}"
    dest new File(buildDir, new File("${tomcatBinaryUrl}").getName())
}

task downloadAndUnzipTomcat(dependsOn: downloadTomcat, type: Copy) {
    from zipTree(downloadTomcat.dest)
    into buildDir
}

task deleteDownloadedZip(dependsOn: downloadAndUnzipTomcat, type: Delete) {
    delete new File("$buildDir", new File("${tomcatBinaryUrl}").getName())
}

task copyConfigurationOverrides(dependsOn: deleteDownloadedZip, type: Copy) {
    from('src/main/resources')
    into("$buildDir/$tomcatDir")
}

task copyTomcatExtras(dependsOn: copyConfigurationOverrides, type: Download) {
    src 'http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.55/bin/extras/catalina-jmx-remote.jar'
    dest new File("$buildDir/$tomcatDir/lib", "catalina-jmx-remote.jar")
}

task copyJwalaDependenciesToTomcatLib(dependsOn: copyTomcatExtras, type: Copy) {
    from configurations.compile
    into("$buildDir/$tomcatDir/lib")
}

task copyJwalaWebappWar(dependsOn: copyJwalaDependenciesToTomcatLib, type: Copy) {
    from project(':jwala-webapp').file("build/libs")
    into file("$buildDir/$tomcatDir/data/webapps")
}

/*task createJwalaDb{
    Class.forName("org.h2.Driver")
    groovy.sql.Sql sql = Sql.newInstance(
                         'jdbc:h2:tcp://localhost/$buildDir/$tomcatDir/data/h2/toc;LOCK_MODE=0"/>',
                         'sa',
                         '',
                          "org.h2.Driver")
    sql.execute (':jwala-persistence').file("create.sql")
}
*/

task zipJwalaTomcat(dependsOn: copyJwalaWebappWar, type: Zip) {
    from "$buildDir/$tomcatDir"
    baseName = 'jwala-tomcat'
    into "$tomcatDir"// note that this specifies path *in* the archive
    destinationDir file("$buildDir") // directory that you want your archive to be placed in
}

//copyWar.dependsOn downloadAndUnzipTomcat, copyConfigurationOverrides, copyJwalaDependenciesToTomcatLib

plugins.withType(MavenPublishPlugin).whenPluginAdded {
    publishing {
        repositories {
            maven {
                url project.properties['publishRepoUrl']
                credentials {
                    username project.properties['publishRepoUser']
                    password project.properties['publishRepoPassword']
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                // from components.java
                artifact file("$buildDir/jwala-tomcat*")
            }
        }
    }
}

